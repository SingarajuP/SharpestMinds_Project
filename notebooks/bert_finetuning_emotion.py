# -*- coding: utf-8 -*-
"""bert_finetuning_emotion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FVe0Nd7brM1CwTtulXLV2L25ftNRJmur
"""

!pip install transformers
!pip install datasets

import pandas as pd
import numpy as np

import time
import pickle


from datasets import load_dataset
from datasets import load_metric

from sklearn.model_selection import train_test_split

from transformers import AutoTokenizer
from transformers import TrainingArguments
from transformers import Trainer

from transformers import AutoModelForSequenceClassification

dataset=load_dataset("dair-ai/emotion")
dataset

"""The dataset already has labels for the classes."""

tokenizer=AutoTokenizer.from_pretrained('bert-base-cased')

def tokenize_data(example):
    return tokenizer(example['text'], padding='max_length')

dataset = dataset.map(tokenize_data, batched=True)

training_args = TrainingArguments("test_trainer", num_train_epochs=3)

model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", num_labels=6)

trainer = Trainer(
    model=model, args=training_args, train_dataset=dataset['train'], eval_dataset=dataset['validation'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# trainer.train()

trainer.save_model("bert_finetuned_model")

#metric = load_metric("f1_score")

def compute_metrics(eval_pred):
    logits, labels = eval_pred
    predictions = np.argmax(logits, axis=-1)
    acc = accuracy_score(labels, preds)
    return acc

trainer.evaluate()

predicted_results = trainer.predict(dataset['test'])

predicted_labels = predicted_results.predictions.argmax(-1) # Get the highest probability prediction
predicted_labels = predicted_labels.flatten().tolist()      # Flatten the predictions into a 1D list
#predicted_labels = [id2label[l] for l in predicted_labels]  # Convert from integers back to strings for readability

from sklearn.metrics import accuracy_score, precision_recall_fscore_support, classification_report

print(classification_report(dataset['test']['label'], 
                            predicted_labels))

